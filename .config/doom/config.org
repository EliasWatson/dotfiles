#+TITLE: My Doom Emacs Configuration

* General Settings
#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(add-to-list 'default-frame-alist '(undecorated . t))

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14)
      doom-variable-pitch-font (font-spec :family "SF Pro Display" :size 18))

(setq doom-theme 'doom-gruvbox)

(setq display-line-numbers-type nil)

(setq org-directory "~/org/")

(setq mac-option-modifier 'super  ; Make Option key act as Super
      mac-command-modifier 'meta) ; Make Command key act as Meta

(with-eval-after-load 'evil
  (define-key evil-insert-state-map (kbd "M-<backspace>") 'kill-whole-line)  ; Cmd+Backspace deletes line
  (define-key evil-insert-state-map (kbd "s-<backspace>") 'backward-kill-word)) ; Option+Backspace deletes word

(setq display-time-load-average nil)
(display-time)
#+END_SRC

* Package Configurations
#+BEGIN_SRC elisp
(use-package! doom-modeline
  :config
  (setq doom-modeline-height 25))

(custom-set-faces!
  '(org-level-1 :inherit outline-1 :height 1.3) ; 4px above, 4px below
  '(org-level-2 :inherit outline-2 :height 1.2) ; 3px above, 3px below
  '(org-level-3 :inherit outline-3 :height 1.1) ; 2px above, 2px below
  '(org-level-4 :inherit outline-4 :height 1.05)) ; 1px above, 1px below

(use-package! org-modern
  :after org
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "◇"))
  (global-org-modern-mode))

(setq org-startup-indented t)

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

(use-package! lsp-tailwindcss :after lsp-mode)

(after! org
  (add-to-list 'org-capture-templates
               '("i" "Idea" entry
                 (file+headline "~/org/ideas.org" "Ideas")
                 "* IDEA %?\n  %U\n"
                 :empty-lines 1)))

(setq org-log-done 'time)

(after! lsp-mode
  (add-hook 'typescript-mode-hook
            (lambda ()
              (setq-local typescript-indent-level 2))))

(use-package! visual-fill-column
  :config
  (setq-default visual-fill-column-center-text t)
  (setq visual-fill-column-enable-sensible-window-split t)
  (defun my-set-visual-fill-column-width ()
    (cond
     ((derived-mode-p 'org-mode)
      (setq-local visual-fill-column-width 80))
     ((derived-mode-p 'prog-mode)
      (setq-local visual-fill-column-width 120))
     (t
      (setq-local visual-fill-column-width 80))))
  :hook
  (find-file-hook . (lambda ()
                      (visual-fill-column-mode 1)
                      (my-set-visual-fill-column-width))))
#+END_SRC

* Packages
#+BEGIN_SRC elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(package! lsp-tailwindcss
  :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))

(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))

(package! visual-fill-column)
#+END_SRC
