#+TITLE: My Doom Emacs Configuration

* Key Tweaks
Swap Super and Meta to avoid conflicts with the Aerospace window manager.
#+begin_src elisp
(setq mac-option-modifier 'super  ; Make Option key act as Super
      mac-command-modifier 'meta) ; Make Command key act as Meta
#+end_src

Update backspace modifiers to match MacOS.
#+begin_src elisp
(with-eval-after-load 'evil
  (define-key evil-insert-state-map (kbd "M-<backspace>") 'kill-whole-line)  ; Cmd+Backspace deletes line
  (define-key evil-insert-state-map (kbd "s-<backspace>") 'backward-kill-word)) ; Option+Backspace deletes word
#+end_src
* Visual
** Borderless Window
#+begin_src elisp
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src
** Fonts
#+begin_src elisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14))
      ;doom-variable-pitch-font (font-spec :family "SF Pro Display" :size 18))
#+end_src
** Theme
#+begin_src elisp
(setq doom-theme 'doom-gruvbox)
#+end_src
** Line Numbers
#+begin_src elisp
(setq display-line-numbers-type nil)
#+end_src
** Modeline
#+begin_src elisp
(use-package! doom-modeline
  :config
  (setq doom-modeline-height 25))

(setq-default display-time-load-average nil)
(display-time)
#+end_src
** Visual Fill Column
*** Package
#+BEGIN_SRC elisp :tangle packages.el
(package! visual-fill-column)
#+END_SRC
*** Config
#+BEGIN_SRC elisp
(use-package! visual-fill-column
  :config
  (setq-default visual-fill-column-center-text t)
  (setq-default visual-fill-column-enable-sensible-window-split t)
  (setq-default visual-fill-column-fringes-outside-margins nil)
  (defun my-set-visual-fill-column-width ()
    (cond
     ;; ((derived-mode-p 'org-mode)
     ;;  (setq-local visual-fill-column-width 80))
     ;; ((derived-mode-p 'prog-mode)
     ;;  (setq-local visual-fill-column-width 120))
     (t
      (setq-local visual-fill-column-width 120))))
  :hook
  (find-file-hook . (lambda ()
                      (visual-fill-column-mode 1)
                      (my-set-visual-fill-column-width))))
#+END_SRC
** Disable Tilde Fringes
#+begin_src elisp
(vi-tilde-fringe-mode -1)
#+end_src
*** TODO This doesn't work
* Org Mode
#+begin_src elisp
(setq org-directory "~/org/")
(setq org-log-done 'time)
#+end_src

** Capture
#+begin_src elisp
(after! org
  (add-to-list 'org-capture-templates
               '("i" "Idea" entry
                 (file+headline "~/org/ideas.org" "Ideas")
                 "* IDEA %?\n  %U\n"
                 :empty-lines 1)))
#+end_src
** Visual
*** Org Modern
#+begin_src elisp
(use-package! org-modern
  :after org
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "◇"))
  (global-org-modern-mode))

(setq org-startup-indented t)
#+end_src
*** Large Headings
#+begin_src elisp
(custom-set-faces!
  '(org-level-1 :inherit outline-1 :height 1.3)
  '(org-level-2 :inherit outline-2 :height 1.2)
  '(org-level-3 :inherit outline-3 :height 1.1)
  '(org-level-4 :inherit outline-4 :height 1.05))
#+end_src
* Prog Mode
#+begin_src elisp
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
* Hyperbole
** Package
#+BEGIN_SRC elisp :tangle packages.el
(package! hyperbole)
#+end_src
** Config
#+begin_src elisp
(use-package! hyperbole
  :config (hyperbole-mode 1))
#+end_src
* GitHub Copilot
** Package
#+BEGIN_SRC elisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
#+END_SRC
** Config
#+begin_src elisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src
* Aidermacs
** Package
#+BEGIN_SRC elisp :tangle packages.el
(package! aidermacs)
#+end_src
** Config
#+begin_src elisp
(use-package! aidermacs
  :bind (("C-c a" . aidermacs-transient-menu))
  :custom
  ; See the Configuration section below
  (aidermacs-use-architect-mode t))
#+end_src
* TypeScript
Force indent level to =2=.
#+begin_src elisp
(after! lsp-mode
  (add-hook 'typescript-mode-hook
            (lambda ()
              (setq-local typescript-indent-level 2))))
#+end_src
* Tailwind CSS
** LSP
*** Package
#+BEGIN_SRC elisp :tangle packages.el
(package! lsp-tailwindcss
  :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+END_SRC
*** Config
#+begin_src elisp
(use-package! lsp-tailwindcss :after lsp-mode)
#+end_src
